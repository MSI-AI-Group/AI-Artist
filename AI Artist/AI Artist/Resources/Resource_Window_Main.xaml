<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:media="clr-namespace:System.Windows.Media;assembly=PresentationCore">

    <!-- #region Style_Button_mini -->
    <Style x:Key="Style_Button_mini" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Image Source="/Image/btn_mini.png" Width="80" Height="80"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- #endregion -->

    <!-- region Style_Button_close -->
    <Style x:Key="Style_Button_close" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Image Source="/Image/btn_close.png" Width="80" Height="80"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- #endregion -->

    <!-- region Style_Button_Delete_Image -->
    <Style x:Key="Style_Button_Delete_Image" TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Image x:Name="_Image" Source="/Image/btn_close.png"/>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/btn_close.png" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/btn_close.png"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/btn_close.png" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- #endregion -->

    <!-- region Style_LinearGradientBrush_Text -->
    <LinearGradientBrush x:Key="Style_Gradual" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Color="#FF3441E2" Offset="0" />
        <GradientStop Color="#FFEB2C43" Offset="1" />
    </LinearGradientBrush>
    <!-- endregion -->

    <!-- region Style_RadioButton_Text -->
    <Style x:Key="Style_RadioButton_Text_Style" TargetType="{x:Type RadioButton}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="BorderBrush" Value="#FFBC86FF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid Background="Transparent">
                        <Border x:Name="BackgroundBorder" BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Width="120" Height="36">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />

                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource Style_Gradual}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="#FFBC86FF" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Opacity" Value="0.6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- endregion -->

    <!-- region Style_RadioButton_small_Text -->
    <Style x:Key="Style_RadioButton_small_Text_Style" TargetType="{x:Type RadioButton}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="80"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="BorderBrush" Value="#FFBC86FF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid Background="Transparent">
                        <Border x:Name="BackgroundBorder" BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Width="80" Height="36">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource Style_Gradual}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="#FFBC86FF" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Opacity" Value="0.6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- endregion -->

    <!-- region Style_RadioButton_small_Img -->
    <Style x:Key="Style_RadioButton_small_Img_Style" TargetType="{x:Type RadioButton}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="80"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="BorderBrush" Value="#FFBC86FF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid Background="Transparent">
                        <Border x:Name="BackgroundBorder" BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Width="80" Height="36">
                            <Image Margin="0,0" Width="40" Height="40" Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource Style_Gradual}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="#FFBC86FF" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Opacity" Value="0.6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- endregion -->

    <!-- region Style_Button_Generate -->
    <Style x:Key="Style_Button_Generate" TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="320"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="BorderBrush" Value="#FFBC86FF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="Transparent">
                        <Border x:Name="BackgroundBorder" BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Width="320" Height="50">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{x:Null}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="#FFBC86FF" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource Style_Gradual}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="#FF505050"/>
                            <Setter TargetName="BackgroundBorder" Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- endregion -->

    <!-- #region Style_Text-->
    <Style x:Key="Style_Text_Btn" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="27"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <Style x:Key="Style_Text_Btn2" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <Style x:Key="Style_Text_Little_Btn" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>
    <!-- #endregion-->

    <!-- #region Style_Button_Img -->
    <Style x:Key="Style_Button_Img" TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="70"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="36"/>
        <Setter Property="BorderBrush" Value="#FFBC86FF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Canvas Background="Transparent" Width="150" Height="70">
                        <Border x:Name="BackgroundBorder" BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Width="150" Height="70">
                            <Image Margin="45,-10" Width="60" Height="60" Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"/>
                        </Border>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{x:Null}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="#FFBC86FF" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource Style_Gradual}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="#FF505050" />
                            <Setter TargetName="BackgroundBorder" Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- #endregion-->

    <!-- #region Style_Button_Cust2 -->
    <Style x:Key="Style_Button_Cust2" TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="#FFBC86FF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Canvas Background="Transparent" Width="150" Height="30">
                        <Border x:Name="BackgroundBorder" BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" Width="150" Height="30"/>

                        <StackPanel Orientation="Vertical" Width="150" Height="30" Margin="0,5,0,0">
                            <TextBlock x:Name="TextBlock_1" HorizontalAlignment="Center" 
                                       Text="PSD GPU" Style="{StaticResource Style_Text_Btn2}" />
                        </StackPanel>
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{x:Null}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="#FFBC86FF" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource Style_Gradual}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="#FF505050" />
                            <Setter TargetName="BackgroundBorder" Property="Opacity" Value="0.3"/>
                            <Setter TargetName="TextBlock_1" Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- #endregion-->

    <!-- #region Style_Button_Add -->
    <Style x:Key="Style_Button_Add" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Image x:Name="_Image" Source="/Image/ic_add_blue.png" Height="60" />
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/ic_add_blue.png" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/ic_add_blue_over.png"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/ic_add_blue_pre.png" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/ic_add_blue_disable.png" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion -->

    <!-- #region Style_Button_Delete -->
    <Style x:Key="Style_Button_Delete" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Image x:Name="_Image" Source="/Image/ic_delete_default.png" Height="60" />
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/ic_delete_default.png" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/ic_delete_over.png"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/ic_delete_pre.png" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/ic_delete_disable.png" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion -->

    <!-- #region Style_Button_Select_Image -->
    <Style x:Key="Style_Button_Select_Image" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Canvas Width="450" Height="350">
                        <Border x:Name="_Border" Background="#FFC4C4C4" Width="450" Height="350">
                            <Image Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"/>
                        </Border>
                    </Canvas>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="#FFC4C4C4" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="gray" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="gray" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="#FF0D0D0D" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion -->

    <!-- #region Style_Button_Output_Image -->
    <Style x:Key="Style_Button_Output_Image" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Canvas Width="500" Height="500">
                        <Border x:Name="_Border" Background="#FFC4C4C4" Width="480" Height="480">
                            <Image Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"/>
                        </Border>
                    </Canvas>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="#FFC4C4C4" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="gray" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="gray" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="#FF0D0D0D" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion -->

    <!-- #region Style_Button_In_Image -->
    <Style x:Key="Style_Button_In_Image" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">

                    <Border x:Name="_Border" Background="#FFC4C4C4" Width="600" Height="600">
                        <Image Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="#FFC4C4C4" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="gray" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="gray" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="#FF0D0D0D" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion -->

    <!-- #region Style_Button_Output_Little_Image -->
    <Style x:Key="Style_Button_Output_Little_Image" TargetType="{x:Type RadioButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">

                    <Border x:Name="_Border" Background="Transparent" Width="55" Height="55">
                        <Image Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"
                               Width="50" Height="50"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="#3C3C3C" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="white" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="#FF0D0D0D" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion -->

    <!-- #region Style_Button_Grid_Image -->
    <Style x:Key="Style_Button_Grid_Image" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="_Border" Background="#FFC4C4C4" 
                            Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"
                            Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}">
                        <Image Source="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="#FFC4C4C4" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="gray" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="gray" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Border" Property="Background" Value ="#FF0D0D0D" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion -->

    <!-- #region Style_Button_Left -->
    <Style x:Key="Style_Button_Left" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Image x:Name="_Image" Source="/Image/L.png" Height="60" />
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/L.png" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/L_disable.png" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion -->

    <!-- #region Style_Button_Right -->
    <Style x:Key="Style_Button_Right" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Image x:Name="_Image" Source="/Image/L.png" Height="60" />
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/R.png" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="_Image" Property="Source" Value ="/Image/R_disable.png" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion -->

    <!-- #region Style_Button_pop -->
    <Style x:Key="Style_Button_pop" TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Width" Value="150"/>
        <Setter Property="Height" Value="45"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Canvas>
                        <Border x:Name="_Border" CornerRadius="8" Width="150" Height="45" TextBlock.TextAlignment="Center"/>
                        <TextBlock x:Name="_TextBlock" Margin="0,5,0,0" Foreground="#000000" FontSize="24" Width="150" Height="45" TextAlignment="Center"
                                       Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"
                                   />
                    </Canvas>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter TargetName="_Border" Property="Background" Value="#c5c5c5" />
                            <Setter TargetName="_TextBlock" Property="Foreground" Value="#000000" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="_Border" Property="Background" Value="#dddddd" />
                            <Setter TargetName="_TextBlock" Property="Foreground" Value="#000000" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="_Border" Property="Background" Value="#bc86ff" />
                            <Setter TargetName="_TextBlock" Property="Foreground" Value="#ffffff" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion -->


</ResourceDictionary>